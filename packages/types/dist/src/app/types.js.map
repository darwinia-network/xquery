{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/app/types.ts"],"names":[],"mappings":";AAAA,8DAA8D;AAC9D,sCAAsC;;;AAQtC,IAAY,eAEX;AAFD,WAAY,eAAe;IACzB,oCAAiB,CAAA;AACnB,CAAC,EAFW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QAE1B;AA4BD,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,wCAAyB,CAAA;IACzB,8BAAe,CAAA;AACjB,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB","sourcesContent":["// Copyright 2021-2022 Darwinia Network authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Queue } from 'bull';\n\nexport type FileRoot = {\n  path: string;\n};\n\nexport enum DataBaseOrmKind {\n  Prisma = 'prisma',\n}\n\nexport interface DataSourceHandler extends HandlerMapping<HandlerKind.DataSource, DataSourceFunc> {\n  forever: boolean;\n}\n\nexport interface DataSource<H extends DataSourceHandler> extends FileRoot {\n  handlers: H[];\n}\n\nexport interface JonHandler extends HandlerMapping<HandlerKind.Queue, QueueJobFunc> {\n  name: string;\n}\n\nexport interface QueueProcess<H extends JonHandler> extends FileRoot {\n  handlers: H[];\n}\n\nexport interface DbOrmMap<K extends string> {\n  kind: K;\n  schemaFile?: string;\n  versionName?: string;\n}\n\nexport type PrismaOrm = DbOrmMap<DataBaseOrmKind.Prisma>;\n\nexport type DbSchema = PrismaOrm | undefined;\n\nexport enum HandlerKind {\n  DataSource = 'dataSource',\n  Queue = 'queue',\n}\n\n/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport type HandlerMapping<K extends HandlerKind, F = Function> = {\n  kind: K;\n  handler: F;\n  file: string;\n};\n\nexport type IntoQueueCallback = (queueName?: string | undefined, data?: unknown) => void;\nexport type BullQueue = (name: string) => Queue;\n\nexport type QueueHandler =\n  | {\n      queueName: string;\n      data: unknown;\n    }\n  | undefined;\n\nexport type DataSourceFunc = (done: IntoQueueCallback) => void;\n\nexport type QueueJobFunc = (data: unknown) => Promise<QueueHandler>;\n\ninterface QueueOptions {\n  name: string;\n  hostId?: string;\n  type?: 'bull' | 'bee';\n  prefix?: 'bull' | 'bq' | string;\n}\n\ninterface RedisConnectionOptions {\n  host: string;\n  port?: number;\n  password?: string;\n  db?: string;\n}\n\ninterface MiddlewareListenOptions {\n  port?: number;\n  host?: string;\n  basePath?: string;\n  disableListen?: boolean;\n  useCdn?: boolean;\n}\n\nexport interface ArenaOptions {\n  queues: Array<QueueOptions & RedisConnectionOptions>;\n  listenOptions: MiddlewareListenOptions;\n}\n"]}